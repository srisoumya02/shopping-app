{"ast":null,"code":"import { ActionTypes } from \"../constants/action-types\";\nconst initialState = {\n  numberCart: 0,\n  Carts: [],\n  productData: []\n};\nexport const cartReducer = (state = initialState, {\n  type,\n  payload\n}) => {\n  console.log(state);\n  console.log(payload);\n  switch (type) {\n    case ActionTypes.GET_NUMBER_CART:\n      return {\n        ...state\n      };\n    case ActionTypes.ADD_TO_CART:\n      if (state.Carts.length === 0) {\n        // If the cart is empty, add the new product as a new item\n        const newItem = {\n          ...payload,\n          quantity: 1\n        };\n        console.log(newItem);\n        return {\n          ...state,\n          Carts: [newItem],\n          numberCart: state.numberCart + 1\n        };\n      } else {\n        // Check if the product with the same _id exists in the cart\n\n        const existingItem = state.Carts.find(item => {\n          console.log(item.id);\n          console.log(payload.id);\n          return item.id === payload.id;\n        });\n        if (existingItem) {\n          // If the product exists, update its quantity using map\n          console.log(state);\n          return {\n            ...state,\n            Carts: state.Carts.map(item => item.id === payload.id ? {\n              ...item,\n              quantity: item.quantity + 1\n            } : item),\n            numberCart: state.numberCart + 1\n          };\n        } else {\n          // If the product is not in the cart, add it as a new item\n\n          const newItem = {\n            ...payload,\n            quantity: 1\n          };\n          console.log(state);\n          return {\n            ...state,\n            Carts: [...state.Carts, newItem],\n            numberCart: state.numberCart + 1\n          };\n        }\n      }\n    case ActionTypes.FETCH_PRODUCT_DATA_SUCCESS:\n      console.log(state);\n      return {\n        ...state,\n        productData: [...state.Carts]\n      };\n    case ActionTypes.REMOVE_FROM_CART:\n      const itemToRemove = state.Carts.find(item => item.id === payload);\n      if (!itemToRemove) {\n        return state;\n      }\n      if (itemToRemove.quantity > '1') {\n        const updatedCarts = state.Carts.map(item => item.id === payload ? {\n          ...item,\n          quantity: item.quantity - 1\n        } : item);\n        return {\n          ...state,\n          Carts: updatedCarts,\n          numberCart: state.numberCart - 1\n        };\n      } else {\n        const updatedCarts = state.Carts.filter(item => item.id !== payload);\n        return {\n          ...state,\n          Carts: updatedCarts,\n          numberCart: state.numberCart - 1\n        };\n      }\n    case UPDATE_CART_ITEM_QUANTITY:\n      const {\n        productId,\n        newQuantity\n      } = action.payload;\n      const updatedCartItems = state.cartItems.map(item => item.productId === productId ? {\n        ...item,\n        quantity: newQuantity\n      } : item);\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["ActionTypes","initialState","numberCart","Carts","productData","cartReducer","state","type","payload","console","log","GET_NUMBER_CART","ADD_TO_CART","length","newItem","quantity","existingItem","find","item","id","map","FETCH_PRODUCT_DATA_SUCCESS","REMOVE_FROM_CART","itemToRemove","updatedCarts","filter","UPDATE_CART_ITEM_QUANTITY","productId","newQuantity","action","updatedCartItems","cartItems"],"sources":["/Users/vivek/Documents/GitHub/shopping-app/src/Redux/reducers/CartReducer.js"],"sourcesContent":["import { ActionTypes } from \"../constants/action-types\"\n\nconst initialState = {\n  numberCart: 0,\n  Carts: [],\n  productData: []\n}\n\nexport const cartReducer = (state = initialState, { type, payload }) => {\n  console.log(state)\n  console.log(payload)\n  \n\n  switch (type) {\n    case ActionTypes.GET_NUMBER_CART:\n      return {\n        ...state\n      };\n      case ActionTypes.ADD_TO_CART:\n       \n          if (state.Carts.length === 0) {\n            // If the cart is empty, add the new product as a new item\n            const newItem = {\n              ...payload,\n              quantity: 1,\n            };\n            console.log(newItem)\n            return {\n              ...state,\n              Carts: [newItem],\n              numberCart: state.numberCart + 1,\n            };\n          } else {\n            // Check if the product with the same _id exists in the cart\n            \n\n            const existingItem = state.Carts.find(item =>{\n              console.log(item.id);\n              console.log(payload.id);\n              return (item.id === payload.id)\n            } );\n        \n            if (existingItem) {\n              // If the product exists, update its quantity using map\n              console.log(state)\n              return {\n                ...state,\n                Carts: state.Carts.map(item =>\n                  item.id === payload.id ? { ...item, quantity: item.quantity + 1 } : item\n                ),\n                numberCart: state.numberCart + 1,\n              };\n            } else {\n              // If the product is not in the cart, add it as a new item\n            \n              const newItem = {\n                ...payload,\n                quantity: 1,\n              };\n              console.log(state)\n              return {\n                ...state,\n                Carts: [...state.Carts, newItem],\n                numberCart: state.numberCart + 1,\n              };\n             \n            }\n          }\n        \n\n    case ActionTypes.FETCH_PRODUCT_DATA_SUCCESS:\n      console.log(state);\n \n\n      return {\n        ...state,\n        productData: [...state.Carts],\n      };\n     \n    case ActionTypes.REMOVE_FROM_CART:\n    const itemToRemove=state.Carts.find((item)=>item.id === payload);\n    if(!itemToRemove){\n      return state;\n    }\n    if(itemToRemove.quantity > '1'){\n      const updatedCarts=state.Carts.map((item)=>\n      item.id === payload ?{...item,quantity:item.quantity - 1}:item)\n      \n      return{\n        ...state,\n      Carts:updatedCarts,\n    numberCart:state.numberCart - 1,\n        };\n    }else{\n      const updatedCarts=state.Carts.filter((item)=>item.id !== payload);\n      return {\n        ...state,\n        Carts: updatedCarts,\n        numberCart: state.numberCart - 1,\n      };\n    }\n    case UPDATE_CART_ITEM_QUANTITY:\n      const { productId, newQuantity } = action.payload;\n      const updatedCartItems = state.cartItems.map((item) =>\n        item.productId === productId ? { ...item, quantity: newQuantity } : item\n      );\n\n    \n    default:\n      return state;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}