{"ast":null,"code":"import { ActionTypes } from \"../constants/action-types\";\nconst initialState = {\n  numberCart: 0,\n  Carts: [],\n  productData: []\n};\nexport const cartReducer = (state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case ActionTypes.GET_NUMBER_CART:\n      return {\n        ...state\n      };\n    case ActionTypes.ADD_TO_CART:\n      //cart is empty no need to check, add product directly\n      if (state.numberCart === 0) {\n        let item = {\n          ...payload,\n          quantity: 1\n        };\n        state.Carts.push(item);\n      } else {\n        //cart is not empty, check if the product is already added, yes increase thby 1\n        let check = false;\n        state.Carts.map((item, index) => {\n          if (item._id === payload._id) {\n            state.Carts[index].quantity++;\n            check = true;\n          }\n        });\n        console.log(check);\n        //cart is not empty and adding new product\n        if (!check) {\n          let _item = {\n            ...payload,\n            quantity: 1\n          };\n          state.Carts.push(_item);\n          console.log(_item);\n        }\n      }\n      return {\n        ...state,\n        numberCart: state.numberCart + 1\n      };\n    case ActionTypes.FETCH_PRODUCT_DATA_SUCCESS:\n      console.log(state);\n      return {\n        ...state,\n        productData: payload\n      };\n    case ActionTypes.REMOVE_FROM_CART:\n      return {\n        ...state,\n        Carts: state.Carts.filter(item => item._id !== payload),\n        numberCart: state.numberCart - 1\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["ActionTypes","initialState","numberCart","Carts","productData","cartReducer","state","type","payload","GET_NUMBER_CART","ADD_TO_CART","item","quantity","push","check","map","index","_id","console","log","_item","FETCH_PRODUCT_DATA_SUCCESS","REMOVE_FROM_CART","filter"],"sources":["/Users/vivek/Documents/GitHub/shopping-app/src/Redux/reducers/CartReducer.js"],"sourcesContent":["import { ActionTypes } from \"../constants/action-types\"\n\nconst initialState = {\n  numberCart: 0,\n  Carts: [],\n  productData: [],\n}\n\nexport const cartReducer = (state = initialState, { type, payload }) => {\n\n  switch (type) {\n    case ActionTypes.GET_NUMBER_CART:\n      return {\n        ...state\n      };\n      case ActionTypes.ADD_TO_CART:\n        //cart is empty no need to check, add product directly\n        if(state.numberCart === 0){\n            let item={\n                ...payload,\n                quantity:1\n            };\n            state.Carts.push(item);\n        }else{\n            //cart is not empty, check if the product is already added, yes increase thby 1\n            let check=false;\n            state.Carts.map((item,index)=>{\n                if(item._id === payload._id){\n                    state.Carts[index].quantity++;\n                    check=true;\n                }\n            });\n            console.log(check)\n            //cart is not empty and adding new product\n            if(!check){\n                let _item={\n                    ...payload,\n                    quantity:1\n                }\n                state.Carts.push(_item);\n                console.log(_item)\n            }\n           \n        }\n        return{\n           ...state,\n           numberCart: state.numberCart+1\n        }\n\n    case ActionTypes.FETCH_PRODUCT_DATA_SUCCESS:\n      console.log(state);\n \n\n      return {\n        ...state,\n        productData: payload,\n      };\n     \n    case ActionTypes.REMOVE_FROM_CART:\n      return {\n        ...state,\n        Carts: state.Carts.filter((item) => item._id !== payload),\n        numberCart: state.numberCart - 1,\n      };\n    default:\n      return state;\n  }\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,2BAA2B;AAEvD,MAAMC,YAAY,GAAG;EACnBC,UAAU,EAAE,CAAC;EACbC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE;AACf,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGL,YAAY,EAAE;EAAEM,IAAI;EAAEC;AAAQ,CAAC,KAAK;EAEtE,QAAQD,IAAI;IACV,KAAKP,WAAW,CAACS,eAAe;MAC9B,OAAO;QACL,GAAGH;MACL,CAAC;IACD,KAAKN,WAAW,CAACU,WAAW;MAC1B;MACA,IAAGJ,KAAK,CAACJ,UAAU,KAAK,CAAC,EAAC;QACtB,IAAIS,IAAI,GAAC;UACL,GAAGH,OAAO;UACVI,QAAQ,EAAC;QACb,CAAC;QACDN,KAAK,CAACH,KAAK,CAACU,IAAI,CAACF,IAAI,CAAC;MAC1B,CAAC,MAAI;QACD;QACA,IAAIG,KAAK,GAAC,KAAK;QACfR,KAAK,CAACH,KAAK,CAACY,GAAG,CAAC,CAACJ,IAAI,EAACK,KAAK,KAAG;UAC1B,IAAGL,IAAI,CAACM,GAAG,KAAKT,OAAO,CAACS,GAAG,EAAC;YACxBX,KAAK,CAACH,KAAK,CAACa,KAAK,CAAC,CAACJ,QAAQ,EAAE;YAC7BE,KAAK,GAAC,IAAI;UACd;QACJ,CAAC,CAAC;QACFI,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;QAClB;QACA,IAAG,CAACA,KAAK,EAAC;UACN,IAAIM,KAAK,GAAC;YACN,GAAGZ,OAAO;YACVI,QAAQ,EAAC;UACb,CAAC;UACDN,KAAK,CAACH,KAAK,CAACU,IAAI,CAACO,KAAK,CAAC;UACvBF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;QACtB;MAEJ;MACA,OAAM;QACH,GAAGd,KAAK;QACRJ,UAAU,EAAEI,KAAK,CAACJ,UAAU,GAAC;MAChC,CAAC;IAEL,KAAKF,WAAW,CAACqB,0BAA0B;MACzCH,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;MAGlB,OAAO;QACL,GAAGA,KAAK;QACRF,WAAW,EAAEI;MACf,CAAC;IAEH,KAAKR,WAAW,CAACsB,gBAAgB;MAC/B,OAAO;QACL,GAAGhB,KAAK;QACRH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACoB,MAAM,CAAEZ,IAAI,IAAKA,IAAI,CAACM,GAAG,KAAKT,OAAO,CAAC;QACzDN,UAAU,EAAEI,KAAK,CAACJ,UAAU,GAAG;MACjC,CAAC;IACH;MACE,OAAOI,KAAK;EAChB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}